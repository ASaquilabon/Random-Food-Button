{"version":3,"sources":["components/button/button.js","components/card/MediaCard.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","onClick","handleClick","item","styles","card","maxWidth","media","height","withStyles","classes","List","data","map","result","Card_default","className","key","id","CardActionArea_default","CardMedia_default","image","image_url","title","name","style","CardContent_default","Typography_default","component","react_fontawesome_index_es","icon","aria-label","location","display_address","phone","review_count","href","url","chosen","arr","Math","floor","random","length","foodChoices","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","preventDefault","setState","axios","get","concat","state","searchLocationQuery","headers","Authorization","then","res","console","log","businesses","results","loading","catch","err","errorState","button_button","card_MediaCard","Component","library","add","faUtensils","faSearchLocation","faPhone","faMapMarkerAlt","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9b8c472.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst Button = (props) => {\n    return (\n      <div>\n        <button onClick={props.handleClick}>Random Food Button!</button>\n        <div>\n          <h1>{props.item}</h1>\n        </div>\n      </div>\n    );\n  }\n\n\nexport default Button;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = {\r\n  card: {\r\n    maxWidth: 800,\r\n  },\r\n  media: {\r\n    height: 480,\r\n  },\r\n};\r\n\r\nconst MediaCard = (props) => {\r\n  const { classes } = props;\r\n  const List = props.data.map(result => {\r\n    return (\r\n\r\n        <Card className={classes.card} key={result.id}>\r\n          <CardActionArea>\r\n            <CardMedia\r\n              className={classes.media}\r\n              image={result.image_url}\r\n              title={result.name}\r\n              style={styles}\r\n            />\r\n            <CardContent>\r\n        <Typography component=\"h2\">\r\n           {result.name}\r\n        </Typography>\r\n        <Typography component=\"p\">\r\n          <FontAwesomeIcon\r\n            icon=\"map-marker-alt\"\r\n            className=\"RestaurantInfo__icon\"\r\n            aria-label=\"address:\"\r\n          />\r\n        {\" \"} {result.location.display_address[0]},{\" \"}\r\n          {result.location.display_address[1]}\r\n          </Typography>\r\n        <Typography component=\"p\">\r\n          <FontAwesomeIcon\r\n            icon=\"phone\"\r\n            className=\"RestaurantInfo__icon\"\r\n            aria-label=\"phone number:\"\r\n          />\r\n          {\" \"}\r\n          {result.phone}\r\n          {\" \"}\r\n          Based on {result.review_count} Reviews\r\n          </Typography>\r\n        <a href={result.url} className=\"RestaurantInfo__website\">\r\n          More information on Yelp\r\n        </a>\r\n            </CardContent>\r\n          </CardActionArea>\r\n        </Card>\r\n      );\r\n    }\r\n    );\r\n  return <div className=\"RestaurantList__gallery\">{List}</div>;\r\n}\r\n\r\n\r\nMediaCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(MediaCard);","import React, { Component } from \"react\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faUtensils,\n  faSearchLocation,\n  faPhone,\n  faMapMarkerAlt\n} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"./components/button\";\nimport Restaurant from \"./components/restaurantList/restaurantList\"\nimport \"./App.css\";\nimport axios from \"axios\";\nimport MediaCard from \"./components/card/MediaCard\"\nconst chosen = arr => {\n  const item = arr[Math.floor(Math.random() * arr.length)];\n  return item;\n};\n\nconst foodChoices = [\n  \"filipino\",\n  \"korean bbq\",\n  \"bbq\",\n  \"sushi\",\n  \"ramen\",\n  \"mexican\",\n  \"hawaiian\"\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      item: \"Click to decide what to eat!\",\n      searchLocationQuery: \"Irvine\",\n      results: [],\n      errorState: null,\n      loading: false\n    };\n  }\n\n  handleClick = event => {\n    event.preventDefault();\n    this.setState(\n      {\n        item: chosen(foodChoices)\n      },\n      () => {\n        axios\n          .get(\n            `${\"https://cors-anywhere.herokuapp.com/\"}https://api.yelp.com/v3/businesses/search?location=${\n              this.state.searchLocationQuery\n            }&term=${this.state.item}`,\n            {\n              //required authorization format from API\n              headers: {\n                //to get the API from the .env file use process.env.{variable name}\n                Authorization:\n                  \"Bearer 4PtF46O0ShJUAsA7FLHtACoydrlyDAaG_MYntvijYDCUGq4GebvL8jhkojNp-1__mJlYDKHAUPIz9Moo90k3LSjEEcr-RyYXipe5TK1sx-dLtM5G-Y4I0_E2y8vRXHYx\"\n              }\n            }\n          )\n          .then(res => {\n            console.log(res.data.businesses);\n            //change the state of App to reflect on the result we are given from the API\n            //at the same time, setting the loading state to false\n            this.setState({ results: res.data.businesses, loading: false });\n          })\n          .catch(err => {\n            //fire the errorState message if there is no information return from the API\n            this.setState({\n              errorState: `Sorry we coudln't find information related to the location you search, do you want to try something else?`,\n              loading: false\n            });\n          });\n      }\n    );\n  };\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Button handleClick={this.handleClick} item={this.state.item} />\n        <MediaCard \n        data={this.state.results} \n        errorState={this.state.errorState}\n        />\n      </div>\n    );\n  }\n}\n\nlibrary.add(faUtensils, faSearchLocation, faPhone, faMapMarkerAlt);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}