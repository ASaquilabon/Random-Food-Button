{"version":3,"sources":["components/button/button.js","components/search/SearchBar.jsx","components/card/MediaCard.jsx","components/jumbotron/Jumbotron.jsx","App.js","serviceWorker.js","index.js","assets/Logo.png"],"names":["Button","props","className","id","onClick","handleClick","SearchBar","handleSearchChange","e","setState","searchLocationQuery","target","value","handleFormSubmit","preventDefault","onFormSubmit","state","clicked","item","onSubmit","htmlFor","arialabel","type","placeholder","this","onChange","href","class","Component","styles","card","display","width","margin","media","height","withStyles","classes","List","data","map","result","key","image","image_url","title","name","style","component","icon","aria-label","location","display_address","phone","review_count","url","Jumbotron","large","up","src","Logo","alt","medium","small","down","foodChoices","App","arr","Math","floor","random","length","axios","get","encodeURIComponent","headers","Authorization","then","res","console","log","businesses","results","loading","catch","err","errorState","library","add","faUtensils","faSearchLocation","faPhone","faMapMarkerAlt","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.c0b984ad.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./button.css\"\r\nconst Button = (props) => {\r\n    return (\r\n      <div className=\"button-result\">\r\n          <button id=\"eat\"\r\n          onClick={props.handleClick}\r\n          >Let's Eat\r\n          </button>\r\n      </div>\r\n      \r\n    );\r\n  }\r\nexport default Button;\r\n","import React, {Component} from 'react';\r\nimport './SearchBar.css';\r\nimport Button from \"../button\";\r\n\r\nclass SearchBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchLocationQuery: \"\",\r\n            item: this.props.item,\r\n            clicked: \"\"\r\n        }\r\n    }\r\n\r\n    handleSearchChange = (e) => {\r\n        this.setState({\r\n            searchLocationQuery: e.target.value\r\n        })\r\n    }\r\n\r\n    handleFormSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.onFormSubmit(this.state.searchLocationQuery)\r\n        this.setState({\r\n            clicked: \"Click here for nearby restaurants\"\r\n        })\r\n    }\r\n    render(){\r\n        return (\r\n            <div className = \"searchForm\">\r\n                {/*add an event listener of form submit so the state only get set when the form is submitted*/}\r\n                <form onSubmit={(e) => this.handleFormSubmit(e)}>\r\n                    <label \r\n                        htmlFor = 'location'\r\n                        arialabel = 'Enter City, Address, or Postal code'\r\n                        className = 'searchForm-label'\r\n                        >\r\n                        <h1>Can't decide on what to eat?!</h1></label>\r\n                        <input \r\n                        type = 'text'\r\n                        id = 'location'\r\n                        placeholder = 'Enter City, Address, or Postal code'\r\n                        value = {this.state.searchLocationQuery}\r\n                        onChange = {this.handleSearchChange}\r\n                        className = 'searchForm__input'\r\n                    />\r\n                    <Button />\r\n                </form>\r\n                <a href=\"#result-section\">\r\n                    <div className=\"result-text\">\r\n                        <p class=\"random\">{this.props.item}</p>\r\n                        <p class=\"random\">{this.state.clicked}</p>\r\n                    </div>\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = {\r\n  card: {\r\n    display: \"inline-flex\",\r\n    width: 480,\r\n    margin: \"5px\",\r\n  },\r\n  media: {\r\n    height: 300,\r\n  },\r\n};\r\n\r\nconst MediaCard = (props) => {\r\n  const { classes } = props;\r\n  const List = props.data.map(result => {\r\n    return (\r\n        <Card className={classes.card} key={result.id}>\r\n          <CardActionArea>\r\n            <CardMedia\r\n              className={classes.media}\r\n              image={result.image_url}\r\n              title={result.name}\r\n              style={styles}\r\n            />\r\n            <CardContent>\r\n        <Typography component=\"h2\">\r\n           {result.name}\r\n        </Typography>\r\n        <Typography component=\"p\">\r\n          <FontAwesomeIcon\r\n            icon=\"map-marker-alt\"\r\n            className=\"RestaurantInfo__icon\"\r\n            aria-label=\"address:\"\r\n          />\r\n        {\" \"} {result.location.display_address[0]},{\" \"}\r\n          {result.location.display_address[1]}\r\n          </Typography>\r\n        <Typography component=\"p\">\r\n          <FontAwesomeIcon\r\n            icon=\"phone\"\r\n            className=\"RestaurantInfo__icon\"\r\n            aria-label=\"phone number:\"\r\n          />\r\n          {\" \"}\r\n          {result.phone}\r\n          {\" \"}\r\n          Based on {result.review_count} Reviews\r\n          </Typography>\r\n        <a href={result.url} className=\"RestaurantInfo__website\">\r\n          More information on Yelp\r\n        </a>\r\n            </CardContent>\r\n          </CardActionArea>\r\n        </Card>\r\n      );\r\n    }\r\n    );\r\n  return <div className=\"RestaurantList__gallery\">{List}</div>;\r\n}\r\n\r\n\r\nMediaCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(MediaCard);","import React from \"react\";\r\nimport Logo from \"../../assets/Logo.png\";\r\nimport \"./Jumbotron.css\";\r\nimport Breakpoint, { BreakpointProvider } from 'react-socks';\r\nconst Jumbotron = () => {\r\n    return (\r\n      <div className=\"jumbo\">\r\n         <Breakpoint large up>\r\n            <img id=\"large\"src={Logo} alt=\"Logo\"/>\r\n        </Breakpoint>\r\n        <Breakpoint medium>\r\n            <img id=\"medium\"src={Logo} alt=\"Logo\"/>\r\n        </Breakpoint>\r\n        <Breakpoint small down>\r\n            <img id=\"small\" src={Logo} alt=\"Logo\"/>\r\n        </Breakpoint>\r\n      </div>\r\n      \r\n    );\r\n  }\r\nexport default Jumbotron;","import React, { Component } from \"react\"\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\"\r\nimport {\r\n  faUtensils,\r\n  faSearchLocation,\r\n  faPhone,\r\n  faMapMarkerAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\"\r\nimport SearchBar from \"./components/search/SearchBar\"\r\nimport \"./App.css\"\r\nimport axios from \"axios\"\r\nimport MediaCard from \"./components/card/MediaCard\"\r\nimport Jumbotron from \"./components/jumbotron/Jumbotron\"\r\nimport Breakpoint, { BreakpointProvider } from \"react-socks\"\r\n\r\nconst chosen = (arr) => {\r\n  const item = arr[Math.floor(Math.random() * arr.length)]\r\n  return item\r\n}\r\n\r\nconst foodChoices = [\r\n  \"Filipino\",\r\n  \"Korean BBQ\",\r\n  \"BBQ\",\r\n  \"Sushi\",\r\n  \"Ramen\",\r\n  \"Mexican\",\r\n  \"Hawaiian\",\r\n  \"Sandwhiches\",\r\n  \"Wings\",\r\n  \"Curry\",\r\n  \"Thai\",\r\n  \"Seafood\",\r\n  \"Burgers\",\r\n  \"Pizza\",\r\n  \"Salad\",\r\n  \"Healthy\",\r\n  \"Southern\",\r\n  \"Soul Food\",\r\n]\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      item: \"Let us help you decide\",\r\n      searchLocationQuery: \"\",\r\n      results: [],\r\n      errorState: null,\r\n      loading: false,\r\n    }\r\n  }\r\n\r\n  onFormSubmit = (searchLocationQuery) => {\r\n    this.setState({\r\n      searchLocationQuery: searchLocationQuery,\r\n    })\r\n    this.setState(\r\n      {\r\n        item: chosen(foodChoices),\r\n      },\r\n      () => {\r\n        axios\r\n          .get(\r\n            `https://igpg6boue7.execute-api.us-west-1.amazonaws.com/dev/?${encodeURIComponent(\r\n              `url=https://api.yelp.com/v3/businesses/search?location=${this.state.searchLocationQuery}&term=${this.state.item}`\r\n            )}`,\r\n            {\r\n              //required authorization format from API\r\n              headers: {\r\n                //to get the API from the .env file use process.env.{variable name}\r\n                Authorization:\r\n                  \"Bearer ZVex6dzsWTaMZqG2tz0veaxVfFmePcq5QWtXvzJqTQp53M11_NN3lueZn5gQYNDWlSJkzUweOJMTIRwyyYs4UPsHhJV3HhJB8m1WurHojHMgfy4MxTKz1zZLzazlXHYx\",\r\n              },\r\n            }\r\n          )\r\n          .then((res) => {\r\n            console.log(res.data.businesses)\r\n            //change the state of App to reflect on the result we are given from the API\r\n            //at the same time, setting the loading state to false\r\n            this.setState({ results: res.data.businesses, loading: false })\r\n          })\r\n          .catch((err) => {\r\n            //fire the errorState message if there is no information return from the API\r\n            this.setState({\r\n              errorState: `Sorry we coudln't find information related to the location you search, do you want to try something else?`,\r\n              loading: false,\r\n            })\r\n          })\r\n      }\r\n    )\r\n  }\r\n  handleClick() {}\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"content\">\r\n          <div className=\"search-bar\">\r\n            <BreakpointProvider>\r\n              <Jumbotron />\r\n            </BreakpointProvider>\r\n            <SearchBar\r\n              onFormSubmit={this.onFormSubmit}\r\n              item={this.state.item}\r\n            />\r\n          </div>\r\n          <div className=\"results\" id=\"result-section\">\r\n            <MediaCard\r\n              data={this.state.results}\r\n              errorState={this.state.errorState}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nlibrary.add(faUtensils, faSearchLocation, faPhone, faMapMarkerAlt)\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/Logo.b1dde36d.png\";"],"sourceRoot":""}